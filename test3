import paho.mqtt.client as mqtt
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)

broker = '192.168.100.200'
port = 1883

topics = ["AQI/03um", "AQI/05um", "AQI/10um", "AQI/25um"]

data_storage = {
    "AQI/03um": [],
    "AQI/05um": [],
    "AQI/10um": [],
    "AQI/25um": []
}

def on_message(client, userdata, message):
    try:
        payload = message.payload.decode('utf-8')
        value = int(payload)
        topic = message.topic

        data_storage[topic].append(value)

        if len(data_storage[topic]) > 20:
            data_storage[topic].pop(0)

        if len(data_storage[topic]) == 20:
            avg_value = sum(data_storage[topic]) / 20
            print(f"Average for {topic} (last 20 values): {avg_value}")

            if sum(data_storage["AQI/03um"]) > 600:
                client.publish("AQI/control", "ON")
                print("Published 'ON' due to AQI/03um threshold")
            elif sum(data_storage["AQI/05um"]) > 100:
                client.publish("AQI/control", "ON")
                print("Published 'ON' due to AQI/05um threshold")
            elif sum(data_storage["AQI/10um"]) > 3:
                client.publish("AQI/control", "ON")
                print("Published 'ON' due to AQI/10um threshold")
            elif sum(data_storage["AQI/25um"]) > 1:
                client.publish("AQI/control", "ON")
                print("Published 'ON' due to AQI/25um threshold")
            else:
                client.publish("AQI/control", "OFF")
                print("Published 'OFF' as all AQI values are below thresholds")

    except ValueError:
        print(f"Invalid message on {message.topic}: {message.payload.decode('utf-8')}")

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Connected to MQTT broker!")
        for topic in topics:
            client.subscribe(topic)
            print(f"Subscribed to {topic}")
    else:
        print(f"Failed to connect, return code {rc}")

def on_disconnect(client, userdata, rc):
    if rc != 0:
        print(f"Unexpected disconnection, return code {rc}")

def main():
    client = mqtt.Client(protocol=mqtt.MQTTv311)
    client.on_message = on_message
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect

    try:
        client.connect(broker, port)
    except Exception as e:
        print(f"Error connecting to MQTT broker: {e}")
        return

    try:
        client.loop_forever()
    except KeyboardInterrupt:
        print("Program interrupted by user")
    except Exception as e:
        print(f"Error running MQTT loop: {e}")

if __name__ == "__main__":
    main()

