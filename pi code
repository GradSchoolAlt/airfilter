import paho.mqtt.client as mqtt
import warnings

# Suppress the DeprecationWarning
warnings.filterwarnings("ignore", category=DeprecationWarning)

# MQTT Broker details
broker = '192.168.100.200'
port = 1883  # Typically 1883 for non-secure connections

# MQTT topics
topics = ["pm03", "pm05", "pm10", "pm25", "pm50"]

# Callback function for when a message is received
def on_message(client, userdata, message):
    try:
        # Decode the message payload and convert it to an integer
        payload = message.payload.decode('utf-8')
        value = int(payload)
        print(f"Received message on {message.topic}: {value}")
    except ValueError:
        print(f"Invalid message on {message.topic}: {message.payload.decode('utf-8')}")

# Callback function for when the client connects to the broker
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Connected to MQTT broker!")
        # Subscribe to all topics once connected
        for topic in topics:
            client.subscribe(topic)
            print(f"Subscribed to {topic}")
    else:
        print(f"Failed to connect, return code {rc}")

# Callback function for handling disconnection
def on_disconnect(client, userdata, rc):
    if rc != 0:
        print(f"Unexpected disconnection, return code {rc}")

# You can comment out or remove this if logging is not needed
# def on_log(client, userdata, level, buf):
#     print(f"Log: {buf}")

def main():
    # Initialize MQTT client using MQTT version 3.1.1
    client = mqtt.Client(protocol=mqtt.MQTTv311)

    # Attach callback functions
    client.on_message = on_message
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect

    # If you want log messages, uncomment the next line
    # client.on_log = on_log

    try:
        # Connect to the MQTT broker
        client.connect(broker, port)
    except Exception as e:
        print(f"Error connecting to MQTT broker: {e}")
        return

    # Start the MQTT client loop to process messages
    try:
        client.loop_forever()
    except KeyboardInterrupt:
        print("Program interrupted by user")
    except Exception as e:
        print(f"Error running MQTT loop: {e}")

if __name__ == "__main__":
    main()
